Comenzando su viaje SQL‚≠ê
Ahora que est√° familiarizado con la interfaz, vamos directamente a ella.

SQL, que significa lenguaje de consulta estructurado , es un lenguaje para interactuar con datos almacenados en algo llamado una base de datos relacional .

Puede pensar en una base de datos relacional como una colecci√≥n de tablas. Una tabla es solo un conjunto de filas y columnas, como una hoja de c√°lculo, que representa exactamente un tipo de entidad. Por ejemplo, una tabla puede representar a empleados de una empresa o compras realizadas, pero no ambas.

Cada fila o registro de una tabla contiene informaci√≥n sobre una sola entidad. Por ejemplo, en una tabla que representa a los empleados, cada fila representa a una sola persona. Cada columna o campo de una tabla contiene un solo atributo para todas las filas de la tabla. Por ejemplo, en una tabla que representa a los empleados, podr√≠amos tener una columna que contenga los nombres y apellidos de todos los empleados.

La tabla de empleados podr√≠a verse as√≠:

carn√© de identidad	nombre	a√±os	nacionalidad
1	Jessica	22	Irlanda
2	Gabriel	48	Francia
3	Laura	36	Estados Unidos
-----------------------------------------------------------------------------
COMO SELECCIONAR UNA COLUMNA DE FORMA INDIVIDUAL EN SQL:
>>> EJEMPLO: SELECT columna_de_la_tabla FROM tabla_de_datos;
-----------------------------------------------------------------------------
SELECCIONAR m√∫ltiples columnas EN SQL:‚≠ê

¬°Bien hecho! Ahora ya sabe c√≥mo seleccionar columnas individuales.

En el mundo real, a menudo querr√° seleccionar varias columnas. Afortunadamente, SQL hace esto realmente f√°cil. Para seleccionar varias columnas de una tabla, ¬°simplemente separe los nombres de las columnas con comas!

Por ejemplo, esta consulta selecciona dos columnas namey birthdate, de la peopletabla:
--------------------------------------------
SELECT name, birthdate
FROM people;
---------------------------------------------
A veces, es posible que desee seleccionar todas las columnas de una tabla. Escribir cada nombre de columna ser√≠a un dolor, por lo que hay un atajo √∫til:
----------------------------------------------
SELECT *
FROM people;
----------------------------------------------
Si solo desea devolver una cierta cantidad de resultados, puede usar la LIMIT palabra clave para limitar la cantidad de filas devueltas:
------------------------------------------------------
SELECT *
FROM people
LIMIT 10;
------------------------------------------------------
---------------------------------------------------------------------------------------------------------
SELECCIONAR DISTINTO SI QUIERO TENER UNICOS VALORES EN MIC COLUMNAS DE MI TABLA:‚≠ê

A menudo, sus resultados incluir√°n muchos valores duplicados. Si desea seleccionar todos los valores √∫nicos de una columna, puede usar la <<<DISTINCT>>> palabra clave.

Esto podr√≠a ser √∫til si, por ejemplo, le interesa saber qu√© idiomas est√°n representados en la filmstabla:
---------------------------------------------------------------------------
SELECT DISTINCT language
FROM films;
---------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
METODO COUNT PARA SABER CUANTAS FILAS HAY EN UNA COLUMNA DE MI TABLA EN SQL:‚≠ê

¬øQu√© sucede si desea contar el n√∫mero de empleados en su tabla de empleados? La COUNTdeclaraci√≥n le permite hacer esto devolviendo el n√∫mero de filas en una o m√°s columnas.

Por ejemplo, este c√≥digo da el n√∫mero de filas en la people tabla:
--------------------------------------
SELECT COUNT(*)
FROM people;
---------------------------------------
--------------------------------------------------------------------------------------------------
PRACTICANDO EL METODO COUNT EN SQL:‚≠ê

Como has visto, COUNT(*) te dice cu√°ntas filas hay en una tabla. Sin embargo, si desea contar el n√∫mero de valores que no faltan en una columna en particular, puede llamar COUNTsolo a esa columna.

Por ejemplo, para contar el n√∫mero de fechas de nacimiento presentes en la peopletabla:
--------------------------------------
SELECT COUNT(birthdate)
FROM people;
--------------------------------------
Tambi√©n es com√∫n combinar COUNTcon DISTINCTpara contar el n√∫mero de valores distintos en una columna.

Por ejemplo, esta consulta cuenta el n√∫mero de fechas de nacimiento distintas contenidas en la peopletabla:
---------------------------------------
SELECT COUNT(DISTINCT birthdate)
FROM people;
---------------------------------------
---------------------------------------------------------------------------------------------------
RESULTADOS DE FILTRADO EN SQL:‚≠ê

¬°Felicidades por terminar el primer cap√≠tulo! Ahora sabe c√≥mo seleccionar columnas y realizar recuentos b√°sicos. Este cap√≠tulo se centrar√° en filtrar sus resultados.

En SQL, la WHERE palabra clave le permite filtrar en base a texto y valores num√©ricos en una tabla. Hay algunos operadores de comparaci√≥n diferentes que puede usar:
------------------------------
= igual
<> no es igual
< menos que
> mas grande que
<= Menos que o igual a
>= Mayor qu√© o igual a
-------------------------------
Por ejemplo, puede filtrar registros de texto como title. El siguiente c√≥digo devuelve todas las pel√≠culas con el t√≠tulo 'Metropolis':
-------------------------------
SELECT title
FROM films
WHERE title = 'Metropolis';
-------------------------------
NOTA<<<¬°Tenga en cuenta que la WHERE cl√°usula siempre viene despu√©s de la FROM declaraci√≥n!>>>
-----------------------------------------------------------------------------------------------
Tenga en cuenta que en este curso utilizaremos <>y no !=para el operador no igual, seg√∫n el est√°ndar SQL.
--------------------------------------------------
¬øQu√© devuelve la siguiente consulta?
SELECT title
FROM films
WHERE release_year > 2000;
--------------------------------------------------
RESPUESTA=> devolvera los los lanzamientos despues del a√±o 2000!
--------------------------------------------------
------------------------------------------------------------------------------------------------------
FILTRAR CON EL METODO WHERE (LA PARTE NUMERICA DE 1 COLUMNA):‚≠ê

Como aprendi√≥ en el ejercicio anterior, la WHERE cl√°usula tambi√©n se puede usar para filtrar registros num√©ricos, como a√±os o edades.

Por ejemplo, la siguiente consulta selecciona todos los detalles de las pel√≠culas con un presupuesto superior a diez mil d√≥lares:
-------------------------------
SELECT *
FROM films
WHERE budget > 10000;
-------------------------------
------------------------------------------------------------------------------------------------------
FILTRADO DE TEXTO SIMPLE CON WHERE EN SQL:‚≠ê

Recuerde, la WHEREcl√°usula tambi√©n se puede usar para filtrar resultados de texto, como nombres o pa√≠ses.

Por ejemplo, esta consulta obtiene los t√≠tulos de todas las pel√≠culas filmadas en China:
----------------------------------
SELECT title
FROM films
WHERE country = 'China';
----------------------------------
Importante: en PostgreSQL (la versi√≥n de SQL que estamos usando), debe usar comillas simples con WHERE.
------------------------------------------------------------------------------------------------------
WHERE y AND en SQL:‚≠ê

A menudo, querr√° seleccionar datos en funci√≥n de m√∫ltiples condiciones. Puede desarrollar sus WHEREconsultas combinando m√∫ltiples condiciones con la ANDpalabra clave.

Por ejemplo,
------------------------------------------------
SELECT title
FROM films
WHERE release_year > 1994
AND release_year < 2000;
-------------------------------------------------
te da los t√≠tulos de pel√≠culas lanzadas entre 1994 y 2000.
--------------------------------------------------
Tenga en cuenta que debe especificar el nombre de la columna por separado para cada ANDcondici√≥n, por lo que lo siguiente no ser√≠a v√°lido:
------------------------------------------
SELECT title
FROM films						! NOTA : ESTA SINTAXIS ES INVALIDA SIN LOS PARENTESIS QUE ENCIERRAN TODO EL WHERE! WHERE release_year > 1994 AND < 2000;
---------------------------------------------
¬°Puede agregar tantas AND condiciones como necesite!
-----------------------------------------------------------------------------------------------------
WHERE; AND; OR; en SQL: ‚≠ê

¬øQu√© sucede si desea seleccionar filas en funci√≥n de varias condiciones en las que se deben cumplir algunas pero no todas las condiciones? Para esto, SQL tiene el ORoperador.

Por ejemplo, los siguientes rendimientos todas pel√≠culas estrenadas en ya sea 1994 o 2000:
----------------------------------------------
SELECT title
FROM films
WHERE release_year = 1994
OR release_year = 2000;
-----------------------------------------------
Tenga en cuenta que debe especificar la columna para cada ORcondici√≥n, por lo que lo siguiente no es v√°lido:
--------------------------------------------------
SELECT title
FROM films
WHERE release_year = 1994 OR 2000;
---------------------------------------------------
Al combinar AND y OR, aseg√∫rese de encerrar las cl√°usulas individuales entre par√©ntesis, as√≠:
-----------------------------------------------------
SELECT title
FROM films
WHERE (release_year = 1994 OR release_year = 1995)
AND (certification = 'PG' OR certification = 'R');
-----------------------------------------------------
De lo contrario, debido a las reglas de precedencia de SQL, ¬°es posible que no obtenga los resultados que espera!
-----------------------------------------------------------------------------------------------------
BETWEEN metodo en SQL:  üêí

Como ha aprendido, puede usar la siguiente consulta para obtener t√≠tulos de todas las pel√≠culas lanzadas en y entre 1994 y 2000:
----------------------------------------
SELECT title
FROM films
WHERE release_year >= 1994
AND release_year <= 2000;
----------------------------------------
Verificar rangos como este es muy com√∫n, por lo que en SQL la BETWEENpalabra clave proporciona una abreviatura √∫til para filtrar valores dentro de un rango especificado. Esta consulta es equivalente a la anterior:
----------------------------------------
SELECT title
FROM films
WHERE release_year
BETWEEN 1994 AND 2000;
----------------------------------------
¬°Es importante recordar que BETWEEN es inclusivo , lo que significa que los valores iniciales y finales est√°n incluidos en los resultados!
-----------------------------------------------------------------------------------------------------
METODO BETWEEN(2): üêí

Similar a la WHEREcl√°usula, la BETWEENcl√°usula se puede usar con m√∫ltiples ANDy ORoperadores, por lo que puede acumular sus consultas y hacerlas a√∫n m√°s poderosas.

Por ejemplo, supongamos que tenemos una tabla llamada kids. Podemos obtener los nombres de todos los ni√±os entre las edades de 2 y 12 a√±os de los Estados Unidos:
---------------------------------
SELECT name
FROM kids
WHERE age BETWEEN 2 AND 12
AND nationality = 'USA';
---------------------------------
Tome un ir en el uso BETWEEN de ANDlos datos de pel√≠culas para obtener el t√≠tulo y el a√±o de lanzamiento de todas las pel√≠culas en espa√±ol publicados entre 1990 y 2000 (ambos inclusive) con presupuestos superiores a $ 100 millones. Hemos dividido el problema en pasos m√°s peque√±os para que pueda construir la consulta a medida que avanza.
-----------------------------------------------------------------------------------------------------
METODO WHERE (IN) EN SQL: üêí 
Como has visto, WHERE es muy √∫til para filtrar resultados. Sin embargo, si desea filtrar en funci√≥n de muchas condiciones, WHEREpuede ser dif√≠cil de manejar. Por ejemplo:
-------------------------------------
SELECT name
FROM kids
WHERE age = 2
OR age = 4
OR age = 6
OR age = 8
OR age = 10;
--------------------------------------
Ingrese el IN operador! El IN operador le permite especificar m√∫ltiples valores en una WHEREcl√°usula, lo que hace que sea m√°s f√°cil y r√°pido especificar m√∫ltiples ORcondiciones. Aseado, ¬øverdad?

Entonces, el ejemplo anterior ser√≠a simplemente:
---------------------------------------
SELECT name
FROM kids
WHERE age IN (2, 4, 6, 8, 10);
---------------------------------------
-----------------------------------------------------------------------------------------------------
INTRODUCCION a NULL y IS NULL: üêí 

En SQL, NULL representa un valor perdido o desconocido. Puede verificar los NULL valores utilizando la expresi√≥n IS NULL. Por ejemplo, para contar la cantidad de fechas de nacimiento que faltan en la people tabla:
-----------------------------
SELECT COUNT(*)
FROM people
WHERE birthdate IS NULL;
-----------------------------
Como puede ver, IS NULL
es √∫til cuando se combina WHEREpara averiguar qu√© datos falta.
A veces, querr√°s filtrar los valores perdidos para que solo obtengas resultados que no lo son NULL. Para hacer esto, puede usar el IS NOT NULL operador.
Por ejemplo, esta consulta proporciona los nombres de todas las personas cuyas fechas de nacimiento no faltan en la peopletabla.
-------------------------------
SELECT name
FROM people
WHERE birthdate IS NOT NULL;
-------------------------------
-----------------------------------------------------------------------------------------------------
METODOS LIKE and NOTLIKE en SQL: üêí

Como has visto, la WHERE cl√°usula se puede usar para filtrar datos de texto. Sin embargo, hasta ahora solo ha podido filtrar especificando el texto exacto que le interesa. En el mundo real, a menudo querr√° buscar un patr√≥n en lugar de una cadena de texto espec√≠fica.

En SQL, el LIKE operador se puede usar en una WHERE cl√°usula para buscar un patr√≥n en una columna. Para lograr esto, utiliza algo llamado comod√≠n como marcador de posici√≥n para algunos otros valores. Hay dos comodines que puede usar con LIKE:

El (%) comod√≠n coincidir√° con cero, uno o muchos caracteres en el texto. Por ejemplo, la siguiente consulta coincide con empresas como 'Data', 'DataC' 'DataCamp', 'DataMind', y as√≠ sucesivamente:
--------------------------------------
SELECT name
FROM companies
WHERE name LIKE 'Data%';
--------------------------------------
El (_) comod√≠n coincidir√° con un solo personaje. Por ejemplo, la siguiente consulta coincide con compa√±√≠as como 'DataCamp', 'DataComp'y as√≠ sucesivamente:
--------------------------------------
SELECT name
FROM companies
WHERE name LIKE 'DataC_mp';
--------------------------------------
Obtenga los nombres de las personas cuyos nombres tienen 'r' como segunda letra. El patr√≥n que necesitas es '_r%'.
---------------------------------------
SELECT name
FROM people
WHERE name LIKE '_r%';
----------------------------------------
OUTPUT:
Arie Posin
Ariel Gade
Ariel Hsing
Ariel Vromen
Aries Spears
Arik Ascherman
Arjun Rampal
Arjun Sablok
Arliss Howard
Arly Jover
----------------------------------------
Tambi√©n puede usar el NOT LIKE operador para buscar registros que no coincidan con el patr√≥n que especifique.
-----------------------------------------------------------------------------------------------------
FUNCIONES AGREGADAS EN SQL: üêí 

A menudo, querr√° realizar algunos c√°lculos sobre los datos en una base de datos. SQL proporciona algunas funciones, llamadas funciones agregadas , para ayudarlo con esto.

Por ejemplo,
--------------------------------
SELECT AVG(budget)
FROM films;
--------------------------------
le da el valor promedio de la budget columna de la films tabla. Del mismo modo, la MAX funci√≥n devuelve el presupuesto m√°s alto:
--------------------------------
SELECT MAX(budget)
FROM films;
--------------------------------
La SUM funci√≥n devuelve el resultado de sumar los valores num√©ricos en una columna:
---------------------------------
SELECT SUM(budget)
FROM films;
---------------------------------
¬°Probablemente puedas adivinar qu√© hace la MINfunci√≥n! Ahora es tu turno de probar algunas funciones SQL.
-----------------------------------------------------------------------------------------------------
Combinando funciones agregadas con WHERE: üêí

Las funciones agregadas se pueden combinar con la WHERE cl√°usula para obtener m√°s informaci√≥n de sus datos.

Por ejemplo, para obtener el presupuesto total de pel√≠culas realizadas en el a√±o 2010 o posterior:
----------------------------------
SELECT SUM(budget)
FROM films
WHERE release_year >= 2010;
------------------------------------
-----------------------------------------------------------------------------------------------------
NOTA OPERACIONES ARITMETICAS EN SQL: üêí

Adem√°s de utilizar las funciones de agregado, puede realizar operaciones aritm√©ticas b√°sicas con s√≠mbolos como +, -, *, y /.

Entonces, por ejemplo, esto da un resultado de 12:
------------------------------
SELECT (4 * 3);
Sin embargo, lo siguiente da un resultado de 1:
----------------------------
SELECT (4 / 3);
-----------------------------
¬øQue est√° pasando aqui?

SQL asume que si divide un n√∫mero entero por un n√∫mero entero, desea recuperar un n√∫mero entero. ¬°As√≠ que ten cuidado al dividir!

Si desea m√°s precisi√≥n al dividir, puede agregar lugares decimales a sus n√∫meros. Por ejemplo,
-----------------------------------
SELECT (4.0 / 3.0) AS result;
le da el resultado que se puede esperar: 1.333.
-------------------------------------
-----------------------------------------------------------------------------------------------------
METODO (AS) COMO ALIAS EN SQL: üêí

Es posible que haya notado en el primer ejercicio de este cap√≠tulo que el nombre de la columna de su resultado era solo el nombre de la funci√≥n que utiliz√≥. Por ejemplo,
----------------------------
SELECT MAX(budget)
FROM films;
----------------------------
le da un resultado con una columna, llamada max. Pero, ¬øqu√© pasa si usa dos funciones como esta?
---------------------------------------
SELECT MAX(budget), MAX(duration)
FROM films;
---------------------------------------
Bueno, entonces tendr√≠as dos columnas con nombre max, ¬°lo cual no es muy √∫til!

Para evitar situaciones como esta, SQL le permite hacer algo llamado alias . Aliasing simplemente significa que asigna un nombre temporal a algo. Para alias, utiliza la ASpalabra clave, que ya ha visto anteriormente en este curso.

Por ejemplo, en el ejemplo anterior podr√≠amos usar alias para aclarar el resultado:
-----------------------------------------
SELECT MAX(budget) AS max_budget,
       MAX(duration) AS max_duration
FROM films;
-----------------------------------------
¬°Los alias son √∫tiles para hacer que los resultados sean m√°s legibles!
-----------------------------------------------------------------------------------------------------
MAS ALIAS EN SQL: üêí

¬°Practiquemos sus nuevas habilidades de alias un poco m√°s antes de continuar!

Recordar: SQL supone que si divide un n√∫mero entero por un n√∫mero entero, desea recuperar un n√∫mero entero.

Esto significa que lo siguiente resultar√° err√≥neamente en 400.0:
-------------------------------
SELECT 45 / 10 * 100.0;
-------------------------------
Esto se debe a que se 45 / 10eval√∫a como un n√∫mero entero ( 4) y no como un n√∫mero decimal como podr√≠amos esperar.

Entonces, cuando est√© dividiendo, aseg√∫rese de que al menos uno de sus n√∫meros tenga un lugar decimal:
------------------------------
SELECT 45 * 100.0 / 10;
------------------------------
¬°Lo anterior ahora da la respuesta correcta 450.0ya que el numerador ( 45 * 100.0) de la divisi√≥n es ahora un decimal!
-----------------------------------------------------------------------------------------------------

EJERCICIO QUE CASI NO ENTENDI PREGUNTAR A FREDDY NO OLVIDAR: üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠

Get the number of decades the films table covers. Alias the result as number_of_decades. The top half of your fraction should be enclosed in parentheses.
----------------------------------------------
RESPUESTA CON AYUDA DE UN TIP: Y FUNCIONO! üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠üò≠

SELECT (MAX(release_year) - MIN(release_year)) / 10.0 AS number_of_decades
FROM films;
-----------------------------------------------
-----------------------------------------------------------------------------------------------------
METODO ORDER BY EN SQL: üêí 

¬°Felicidades por haber llegado tan lejos! Ahora sabe c√≥mo seleccionar y filtrar sus resultados.

En este cap√≠tulo aprender√° c√≥mo ordenar y agrupar sus resultados para obtener una mejor comprensi√≥n. ¬°Vamonos!

En SQL, la ORDER BYpalabra clave se usa para ordenar los resultados en orden ascendente o descendente de acuerdo con los valores de una o m√°s columnas.

Por defecto ORDER BYse ordenar√° en orden ascendente. Si desea ordenar los resultados en orden descendente, puede usar la DESCpalabra clave. Por ejemplo,
------------------------------
SELECT title
FROM films
ORDER BY release_year DESC;
------------------------------
le ofrece los t√≠tulos de las pel√≠culas ordenadas por a√±o de lanzamiento, desde las m√°s recientes hasta las m√°s antiguas.
------------
EJERCICIO:üêí üêí üêí ejercicioooo
------------
Get the title of films released in 2000 or 2012, in the order they were released:
------------
SELECT title
FROM films
WHERE release_year IN (2000, 2012)
ORDER BY release_year
------------
-----------------------------------------------------------------------------------------------------
ORDENAR COLUMNAS INDIVIDUALES EN SQL CON EL METODO ( ORDER BY x DESC): üêí 

Para ordenar los resultados en orden descendente , puede colocar la palabra clave DESCdespu√©s de su ORDER BY. Por ejemplo, para obtener todos los nombres en la peopletabla, en orden alfab√©tico inverso:
------------------------
SELECT name
FROM people
ORDER BY name DESC;
------------------------
¬°Ahora practique el uso ORDER BYcon DESCpara ordenar columnas individuales en orden descendente!
-----------------------------------------------------------------------------------------------------
ORDENAR MULTIPLES COLUMNAS EN SQL CON ORDER BY:  üêí

ORDER BY Tambi√©n se puede utilizar para ordenar en varias columnas. Se ordenar√° por la primera columna especificada, luego se ordenar√° por la siguiente, luego la siguiente, y as√≠ sucesivamente. Por ejemplo,
----------------------------
SELECT birthdate, name
FROM people
ORDER BY birthdate, name;
----------------------------
ordena primero las fechas de nacimiento (de la m√°s antigua a la m√°s reciente) y luego ordena los nombres en orden alfab√©tico. ¬°El orden de las columnas es importante!

¬°Intenta usar ORDER BYpara ordenar varias columnas! Recuerde, para especificar varias columnas, separe los nombres de las columnas con una coma.
-----------------------------------------------------------------------------------------------------
METODO (GROUP BY) EN SQL: üêí

¬°Ahora sabes c√≥mo ordenar los resultados! A menudo necesitar√° agregar resultados. Por ejemplo, es posible que desee contar el n√∫mero de empleados masculinos y femeninos en su empresa. Aqu√≠, lo que quieres es agrupar a todos los machos y contarlos, y agrupar a todas las hembras y contarlas. En SQL, le GROUP BYpermite agrupar un resultado por una o m√°s columnas, as√≠:
--------------------------------
SELECT sex, count(*)
FROM employees
GROUP BY sex;
--------------------------------
Esto podr√≠a dar, por ejemplo:
--------------------------------
sexo	contar
masculino	15
hembra	19
--------------------------------
NOTA : Com√∫nmente, GROUP BY se usa con funciones agregadas como COUNT()o MAX(). Tenga en cuenta que GROUP BYsiempre va despu√©s de la FROM cl√°usula!
---------------------------------------------------------------------------------------------------
USANDO METODO (GROUP BY) EN SQL: üêí

Como acaba de ver, ¬°combinar funciones agregadas con GROUP BYpuede producir algunos resultados poderosos!

Una advertencia: SQL devolver√° un error si intenta SELECTun campo que no est√° en su GROUP BYcl√°usula sin usarlo para calcular alg√∫n tipo de valor sobre todo el grupo.

Tenga en cuenta que se puede combinar GROUP BYcon ORDER BYagrupar sus resultados, calcular algo sobre ellos, y luego ordenar los resultados. Por ejemplo,
------------------------------
SELECT sex, count(*)
FROM employees
GROUP BY sex
ORDER BY count DESC;
------------------------------
podr√≠a devolver algo como
-------------------------------
sexo	contar
hembra	19
masculino	15
-------------------------------
porque hay m√°s mujeres en nuestra empresa que hombres. Tenga en cuenta tambi√©n que ORDER BYsiempre va despu√©s GROUP BY. ¬°Probemos algunos ejercicios!
NOTA : CASI SIEMPRE ORDER BY VA DE ULTIMAS!
-----------------------------------------------------------------------------------------------------
METODO (HAVING) PARA PODER USAR LAS FUNCIONES AGREGADAS EN SQL: üêí

En SQL, las funciones agregadas no se pueden usar en WHEREcl√°usulas. Por ejemplo, la siguiente consulta no es v√°lida:
-------------------------
SELECT release_year
FROM films
GROUP BY release_year
WHERE COUNT(title) > 10;
-------------------------
Esto significa que si desea filtrar en funci√≥n del resultado de una funci√≥n agregada, ¬°necesita otra forma! Ah√≠ es donde HAVINGentra la cl√°usula. Por ejemplo,
---------------------------
SELECT release_year
FROM films
GROUP BY release_year
HAVING COUNT(title) > 10;
----------------------------
muestra solo aquellos a√±os en los que se estrenaron m√°s de 10 pel√≠culas.
-----------------------------------------------------------------------------------------------------
EJERCICIO DE REPASO DE METODOS (HAVING, ORDER BY, GROUP BY) EN SQL: üêí
------------------------------------------------------------------------
Todos juntos ahora
Tiempo para practicar el uso ORDER BY, GROUP BYy HAVINGjuntos.

Ahora va a escribir una consulta que devuelva el presupuesto promedio y los ingresos brutos promedio de las pel√≠culas en cada a√±o posterior a 1990, si el presupuesto promedio es superior a $ 60 millones.

Esta ser√° una gran consulta, ¬°pero puede manejarla!
------------------------------------------------------------------------
SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000
ORDER BY avg_gross DESC;
--------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
EJERCICIO: üêí

All together now (2)
Great work! Now try another large query. This time, all in one go!

Remember, if you only want to return a certain number of results, you can use the LIMIT keyword to limit the number of rows returned

Instructions:

Get the country, average budget, and average gross take of countries that have made more than 10 films. Order the result by country name, and limit the number of results displayed to 5. You should alias the averages as avg_budget and avg_gross respectively.
-----------------------------------
SOLUCION:
-----------------------------------
-- select country, average budget, average gross
SELECT country, AVG (budget) AS avg_budget, AVG (gross) AS avg_gross
-- from the films table
FROM films
-- group by country 
GROUP BY country
-- where the country has more than 10 titles
HAVING COUNT(title) > 10
-- order by country
ORDER BY country
-- limit to only show 5 results
LIMIT 5;
-------------------------------------
SALIDA:
country	avg_budget	avg_gross
Australia	31172110.460000000000	40205909.571428571429
Canada	14798458.715596330275	22432066.680555555556
China	62219000.000000000000	14143040.736842105263
Denmark	13922222.222222222222	1418469.111111111111
France	30672034.615384615385	16350593.578512396694
--------------------------------------
-----------------------------------------------------------------------------------------------------
EJEMPLO DE UNA COMBINACION ENTRE TABLAS EN SQL: üêíüêíüêí 

¬°Felicidades por llegar al final del curso! A estas alturas ya debe tener una buena comprensi√≥n de los conceptos b√°sicos de SQL.

Hay un concepto m√°s que vamos a presentar. Es posible que haya notado que todos sus resultados hasta ahora provienen de una sola tabla, por ejemplo, filmso people.

Sin embargo, en el mundo real, a menudo querr√° consultar varias tablas. Por ejemplo, ¬øqu√© pasa si desea ver la puntuaci√≥n IMDB para una pel√≠cula en particular?

En este caso, querr√° obtener la ID de la pel√≠cula de la filmstabla y luego usarla para obtener informaci√≥n de IMDB de la reviewstabla. En SQL, este concepto se conoce como una combinaci√≥n , y una combinaci√≥n b√°sica se muestra en el editor a la derecha.

¬°La consulta en el editor obtiene la puntuaci√≥n IMDB para la pel√≠cula To Kill a Mockingbird ! ¬øGuay, verdad?

Como puede ver, las uniones son incre√≠blemente √∫tiles e importantes de entender para cualquiera que use SQL.

¬°Tenemos un curso de seguimiento completo dedicado a ellos llamado Unir datos en PostgreSQL para que pueda perfeccionar a√∫n m√°s sus habilidades en la base de datos!
------------------------------
EJEMPLO:
------------------------------
SELECT title, imdb_score
FROM films
JOIN reviews
ON films.id = reviews.film_id
WHERE title = 'To Kill a Mockingbird';

------------------------------
-----------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------
