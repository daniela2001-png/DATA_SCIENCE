	TEMA: LEYENDO MULTIPLES FILES EN PANDAS (DATAFRAMES):
	
Lectura de marcos de datos de múltiples archivos:⭐⭐⭐
------------------------------------------------------------
Cuando los datos se distribuyen entre varios archivos, generalmente invoca pandas read_csv()(o una función de importación de datos similar) varias veces para cargar los datos en varios marcos de datos.

Los archivos de datos para este ejemplo se han derivado de una lista de medallas olímpicas otorgadas entre 1896 y 2008 compiladas por The Guardian.

Las etiquetas de las columnas de cada trama de datos son NOC, Country, y Totaldonde NOCes un código de tres letras para el nombre del país y Totales el número de medallas que ganaron de tipo (bronce, plata u oro).

Este curso toca muchos conceptos que puede haber olvidado, así que si alguna vez necesita un repaso rápido, descargue la hoja de trucos de Pandas y manténgala a mano.
-------------------------------------------------------------
Instrucciones
-------------------------------------------------------------
Importar pandas como pd.
Lea el archivo 'Bronze.csv'en un DataFrame llamado bronze.
Lea el archivo 'Silver.csv'en un DataFrame llamado silver.
Lea el archivo 'Gold.csv'en un DataFrame llamado gold.
Imprima las primeras 5 filas del DataFrame gold. Esto se ha hecho por usted, así que presione 'Enviar respuesta' para ver los resultados.
-------------------------------------------------------------
SOLUCION:

bronze = pd.read_csv("Bronze.csv")
silver = pd.read-csv("Silver.csv")
gold = pd.read_csv("Gold.csv")
print(gold.head())

-------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Lectura de marcos de datos de múltiples archivos en un bucle :⭐⭐⭐
----------------------------------
Como viste en el video, cargar datos de múltiples archivos en DataFrames es más eficiente en un bucle o una comprensión de la lista .

Tenga en cuenta que este enfoque no se limita a trabajar con archivos CSV. Es decir, incluso si sus datos vienen en otros formatos, siempre que los pandas tengan una función de importación de datos adecuada, puede aplicar un bucle o comprensión para generar una lista de DataFrames importados de los archivos de origen.

Aquí, continuará trabajando con el conjunto de datos de medallas olímpicas de The Guardian .
--------------------------
Instrucciones
--------------------------
Crear una lista de nombres de archivos llamada filenamesde tres cuerdas 'Gold.csv', 'Silver.csv', y 'Bronze.csv'. Esto se ha hecho por ti.
Use un forbucle para crear otra lista llamada que dataframescontenga los tres DataFrames cargados desde filenames:
Iterar de nuevo filenames.
Lea cada archivo CSV en filenamesun DataFrame y añádalo dataframesusando pd.read_csv()dentro de una llamada a .append().
Imprima las primeras 5 filas del primer DataFrame de la lista dataframes. Esto se ha hecho por usted, así que presione 'Enviar respuesta' para ver los resultados.
--------------------------
SOLUCION:

filenames = ["Gold.csv", "Silver.csv", "Bronze.csv"]
dataframes = []
for filename in filenames:
	dataframes.append(pd.read_csv(filename))
print(dataframes[0].head())
---------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Combinando DataFrames de múltiples archivos de datos: ⭐⭐⭐
------------------------

En este ejercicio, podrás combinar las tres tramas de datos de ejercicios anteriores - gold, silver, y bronze- en una única trama de datos llamada medals. El enfoque que usará aquí es torpe. Más adelante en el curso, verá varios métodos poderosos que se usan con frecuencia en la práctica para concatenar o fusionar DataFrames.

Recuerde, las etiquetas de las columnas de cada trama de datos son NOC, Countryy Total, donde NOCes un código de tres letras para el nombre del país y Totales el número de medallas de ese tipo de won.

------------------
Instrucciones:
------------------
- Construya una copia del DataFrame gold llamado medals utilizando el .copy() método
- Crear una lista new_labels con las entradas 'NOC', 'Country', y 'Gold'. Esto es lo mismo que las etiquetas de columna de goldcon la      etiqueta de columna 'Total'reemplazada por 'Gold'.
- Cambie el nombre de las columnas medals asignando new_labels a medals.columns.
- Crear nuevas columnas 'Silver'y 'Bronze' al medals usar silver['Total'] & bronze['Total'].
- Imprima las 5 filas superiores del DataFrame final medals. ¡Esto se ha hecho por usted, así que presione 'Enviar respuesta' para ver el  resultado!
------------------------
SOLUCION:

medals = gold.copy() # Here I created a copy of the dataframe gold
new_labels = ['NOC', 'Country', 'Gold']
medals.columns = new_labels # aqui cambio el nombre de las columna Total por Gold!
medasl['Silver'] = silver['Total']
medals['Bronze'] = bronze['Total']
print(medals.head())

------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Ordenar DataFrame con el índice y las columnas: ⭐⭐⭐

A menudo es útil reorganizar la secuencia de las filas de un DataFrame ordenando . No tiene que implementar esto usted mismo; Los principales métodos para hacerlo son .sort_index()y .sort_values().

En este ejercicio, usará estos métodos con un DataFrame de valores de temperatura indexados por nombres de mes. Ordenarás las filas alfabéticamente usando el Índice y numéricamente usando una columna. Tenga en cuenta que, para estos datos, el orden original es probablemente más útil e intuitivo: el propósito aquí es que comprenda lo que hacen los métodos de clasificación.

----------------------
Instrucciones:
----------------------
- Lea 'monthly_max_temp.csv'en un DataFrame llamado weather1 con 'Month'como el índice.
- Ordene el índice weather1en orden alfabético utilizando el .sort_index()método y almacene el resultado en weather2.
- Ordene el índice de weather1en orden alfabético inverso especificando el argumento adicional de la palabra clave ascending=Falsedentro .sort_index().
- Use el .sort_values()método para ordenar weather1en orden numérico creciente de acuerdo con los valores de la columna 'Max TemperatureF'.
------------------------
SOLUCION:
------------------------
import pandas as pd
weather1 = pd.read_csv("monthly_max_temp.csv")
print(weather1.head())
weather2 = weather1.sort_index()
print(weather2)
weather3 = weather1.sort_index(ascending= False)
print(weather3.head())
weather4 = weather1.sort_values("Max TemperatureF") # aqui ordeno por columna (Max TemperatureF)
------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

Reindexar DataFrame de una lista: ⭐⭐⭐

Los métodos de clasificación no son la única forma de cambiar los índices del marco de datos. También está el .reindex()método.

En este ejercicio, se le REINDEX una trama de datos de los valores de la temperatura media-trimestrales muestreada para contener muestras mensuales (esto es un ejemplo de muestreo superior o el aumento de la tasa de muestras, que se recordará de las fundaciones pandas curso).

Los datos originales tiene la abreviatura del primer mes del trimestre (intervalo de tres meses) en el índice, es decir Apr, Jan, Jul, y Oct. Estos datos se han cargado en un DataFrame llamado weather1 y se han impreso en su totalidad en el Shell de IPython. Observe que solo tiene cuatro filas (correspondientes al primer mes de cada trimestre) y que las filas no están ordenadas cronológicamente.

Inicialmente usará una lista de las abreviaturas de doce meses y luego aplicará el .ffill()método para completar las entradas nulas al realizar el muestreo superior. Esta lista de abreviaturas de mes se ha precargado como year.

-----------------------
Instrucciones:
-----------------------
- Reordene las filas del weather1 uso del .reindex() método con la lista year como argumento, que contiene las abreviaturas de cada mes.
- Reordene las filas weather1tal como lo hizo anteriormente, esta vez encadenando el .ffill() método para reemplazar los valores nulos con el último valor no nulo anterior.
------------------------
SOLUCION:

import pandas as pd

# Reindex weather1 using the list year: weather2
weather2 = weather1.reindex(year)#aqui no me hara los mimso que en el next step ya que no usamos el metodo ffill()

# Print weather2
print(weather2)
print("=" * 60)
# Reindex weather1 using the list year with forward-fill: weather3
weather3 = weather1.reindex(year).ffill()#este ffill me llenara los mismo valores en cada fila con un intervalo trimestral

# Print weather3
print(weather3)
------------------------
SALIDA:

      Mean TemperatureF
Month                   
Jan            32.133333
Feb                  NaN
Mar                  NaN
Apr            61.956044
May                  NaN
Jun                  NaN
Jul            68.934783
Aug                  NaN
Sep                  NaN
Oct            43.434783
Nov                  NaN
Dec                  NaN
============================================================
       Mean TemperatureF
Month                   
Jan            32.133333
Feb            32.133333
Mar            32.133333
Apr            61.956044
May            61.956044
Jun            61.956044
Jul            68.934783
Aug            68.934783
Sep            68.934783
Oct            43.434783
Nov            43.434783
Dec            43.434783

------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Reindexar usando otro índice DataFrame: ⭐⭐⭐

Otra técnica común es reindexar un DataFrame utilizando el Índice de otro DataFrame. El .reindex()método DataFrame puede aceptar el Índice de un DataFrame o Series como entrada. Puede acceder al índice de un DataFrame con su .indexatributo.

El conjunto de datos de nombres de bebés de data.gov resume los recuentos de nombres (con géneros) de nacimientos registrados en los EE. UU. Desde 1881. En este ejercicio, comenzará con dos marcos de datos de nombres de bebés names_1981y se names_1881cargará por usted.

Los DataFrames names_1981y names_1881 ambos tienen un MultiIndex con niveles namey genderdan etiquetas únicas para los recuentos en cada fila. Si está interesado en ver cómo se configuraron los MultiIndexes names_1981y si names_1881se leyeron con los siguientes comandos:

------------------------------------------------------------------------------------------------------------
names_1981 = pd.read_csv('names1981.csv', header=None, names=['name','gender','count'], index_col=(0,1))
names_1881 = pd.read_csv('names1881.csv', header=None, names=['name','gender','count'], index_col=(0,1))
------------------------------------------------------------------------------------------------------------

Como puede ver al observar sus formas, que se han impreso en IPython Shell, el DataFrame correspondiente a los nacimientos de 1981 es mucho más grande, lo que refleja la mayor diversidad de nombres en 1981 en comparación con 1881.

Su trabajo aquí es utilizar el DataFrame .reindex()y los .dropna()métodos para hacer un DataFrame common_namescontando nombres de 1881 que todavía eran populares en 1981.
------------------------------
Instrucciones
------------------------------
- Crear una nueva trama de datos common_names de indexación names_1981 mediante el index atributo de la trama de datos names_1881 de los nombres de mayor edad.
- Imprima la forma del nuevo common_names DataFrame. Esto se ha hecho por ti. Debería ser el mismo que el de names_1881.
- Descarte las filas common_names que tienen recuentos nulos utilizando el .dropna() método Estas filas corresponden a nombres que pasaron de moda entre 1881 y 1981.
- Imprima la forma del common_names DataFrame reasignado . ¡Esto se ha hecho por usted, así que presione 'Enviar respuesta' para ver el resultado!
-------------------------------
SOLUCION:
-------------------------------
import pandas as pd
 # Reindex names_1981 with index of names_1881: common_names
print(names_1981.head())
common_names = names_1981.reindex(names_1881.index)
print("DESPUESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS")
print(names_1981.head())
# Print shape of common_names
print(common_names.shape)


# Drop rows with null counts: common_names
common_names = common_names.dropna()


# Print shape of new common_names
print(common_names.shape)

-------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Difusión en fórmulas aritméticas: ⭐⭐⭐

En este ejercicio, trabajará con datos meteorológicos extraídos de wunderground.com . El DataFrame weatherse ha precargado junto con pandasas pd. Tiene 365 filas (observadas cada día del año 2013 en Pittsburgh, PA) y 22 columnas que reflejan diferentes mediciones climáticas cada día.

Subconjunto una colección de columnas relacionadas con mediciones de temperatura en grados Fahrenheit, las convertirá a grados Celsius y volverá a etiquetar las columnas del nuevo DataFrame para reflejar el cambio de unidades.

Recuerde, los operadores aritméticos comunes (como +, -, *, y /) de difusión valores escalares a tramas de datos conforme al combinar escalares y tramas de datos en expresiones aritméticas. La transmisión también funciona con series pandas y matrices NumPy.
-----------------------------------------
Instrucciones
----------------------------------------
Crear una nueva trama de datos temps_fmediante la extracción de las columnas 'Min TemperatureF', 'Mean TemperatureF', y 'Max TemperatureF'de weatheruna nueva trama de datos temps_f. Para hacer esto, pase las columnas relevantes como una lista a weather[].
Crear un nuevo trama de datos temps_cde temps_fuso de la fórmula (temps_f - 32) * 5/9.
Cambie el nombre de las columnas de temps_cpara reemplazar 'F'con el 'C'uso del .str.replace('F', 'C')método temps_c.columns.
Imprima las primeras 5 filas de DataFrame temps_c. ¡Esto se ha hecho por usted, así que presione 'Enviar respuesta' para ver el resultado!
------------------------------------------
SOLUCION:
------------------------------------------

# Extract selected columns from weather as new DataFrame: temps_f
temps_f = weather[['Min TemperatureF', 'Mean TemperatureF', 'Max TemperatureF']]

# Convert temps_f to celsius: temps_c
temps_c = (temps_f - 32) * 5/9

# Rename 'F' in column names with 'C': temps_c.columns
temps_c.columns = temps_c.columns.str.replace('F', 'C') 

# Print first 5 rows of temps_c
print(temps_c.head())
------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Cálculo del crecimiento porcentual del PIB  : ⭐⭐⭐

Su trabajo en este ejercicio es calcular el cambio porcentual anual del PIB ( producto interno bruto ) desde 2008.
Los datos se obtuvieron del Banco de la Reserva Federal de St. Louis y están disponibles en el archivo GDP.csv, que contiene datos trimestrales ; lo volverá a muestrear en muestreo anual y luego calculará el crecimiento anual del PIB. Para un repaso sobre el remuestreo, consulte el material relevante de Pandas Foundations .

-------------------------------------------
Instrucciones
-------------------------------------------

Lea el archivo 'GDP.csv'en un DataFrame llamado gdp, usando parse_dates=Truey index_col='DATE'.

Cree un DataFrame dividiendo post2008de gdpmanera que comprenda todas las filas desde 2008 en adelante.

Imprime las últimas 8 filas de la rebanada post2008. Esto se ha hecho por ti. Estos datos tienen una frecuencia trimestral, por lo que los índices están separados por intervalos de tres meses.

Cree el DataFrame volviendo a muestrear yearlyel segmento post2008por año. Recuerde, debe encadenar .resample()(usando el alias 'A'para la frecuencia anual) con algún tipo de agregación; utilizará el método de agregación .last()para seleccionar el último elemento al volver a muestrear.

Calcule el porcentaje de crecimiento del DataFrame muestreado yearlycon .pct_change() * 100.

--------------------------------------------
SOLUCION:

import pandas as pd

# Read 'GDP.csv' into a DataFrame: gdp
gdp = pd.read_csv('GDP.csv', index_col='DATE', parse_dates=True)
# Slice all the gdp data from 2008 onward: post2008
post2008 = gdp.loc['2008':,]
#print(post2008)
# Print the last 8 rows of post2008
print(post2008.tail(8))

# Resample post2008 by year, keeping last(): yearly
yearly = post2008.resample('A').last()# organizamos 'A'anualmente cada gdp

# Print yearly
print(yearly)
# Compute percentage growth of yearly: yearly['growth']
yearly['growth'] = yearly.pct_change() * 100 # Calcule el crecimiento porcentual del DataFrame muestreado anualmente con .pct_change () * 100.

# Print yearly again
print(yearly)

--------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Convertir moneda de acciones : ⭐⭐⭐

En este ejercicio, los precios de las acciones en dólares estadounidenses para el S&P 500 en 2015 se obtuvieron de Yahoo Finance . Los archivos sp500.csvpara sp500 y exchange.csvpara los tipos de cambio se le proporcionan a usted.

Usando el tipo de cambio diario a Libras esterlinas, su tarea es convertir los precios de las columnas Abrir y Cerrar.
-------------------------------------------------------------------
SOLUCION:
-------------------------------------------------------------------
# Import pandas
import pandas as pd

# Read 'sp500.csv' into a DataFrame: sp500
sp500 = pd.read_csv('sp500.csv', parse_dates=True, index_col='Date')

# Read 'exchange.csv' into a DataFrame: exchange
exchange = pd.read_csv('exchange.csv', parse_dates=True, index_col='Date')

# Subset 'Open' & 'Close' columns from sp500: dollars
dollars = sp500[['Open', 'Close']]

# Print the head of dollars
print(dollars.head())

# Convert dollars to pounds: pounds
pounds = dollars.multiply(exchange['GBP/USD'], axis='rows')

# Print the head of pounds
print(pounds.head())
-------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------------------------------------------

